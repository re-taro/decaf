name: CI

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings"
  RUSTUP_MAX_RETRIES: 10

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.ref_name != 'main' }}

jobs:
  rustfmt:
    name: Rustfmt [Formatter]
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2.7.3
      - name: Build | Format
        run: cargo fmt --all -- --check
  taplo:
    name: Taplo [Linter]
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2.7.3
      - name: Setup | taplo
        run: cargo install taplo-cli
      - name: Build | Lint
        run: taplo fmt --check **/*/Cargo.toml
  clippy:
    name: Clippy [Linter]
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2.7.3
      - name: Build | Lint
        uses: giraffate/clippy-action@94e9bd8deab2618756ec5380f12eb35bcb0a88ca
  cargo_check:
    name: Compile
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2.7.3
      - name: Build | Check
        run: cargo check --workspace --locked
  cargo_check_no_features:
    name: Compile with no features enabled
    needs: cargo_check
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2.7.3
      - name: Build | Check
        run: cargo check --workspace --locked --no-default-features
  cargo_check_all_features:
    name: Compile with all features enabled
    needs: cargo_check
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2.7.3
      - name: Build | Check
        run: cargo check --workspace --locked --all-features
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2.7.3
      - name: Setup | Filter changes
        uses: dorny/paths-filter@v3.0.2
        id: changes
        with:
          filters: |
            parser:
              - 'parser/**'
      - name: Build | Parser test
        if: steps.changes.outputs.parser == 'true'
        run: cargo test
        working-directory: parser
      - name: Build | Basic test
        run: cargo test
  fuzzing:
    name: Fuzzing
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        fuzz-target: [module_roundtrip_naive, module_roundtrip_structured]
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@nightly
      - name: Setup | Filter changes
        uses: dorny/paths-filter@v3.0.2
        id: changes
        with:
          filters: |
            parser:
              - 'parser/**'
      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2.7.3
      - name: Setup | cargo-fuzz
        if: steps.changes.outputs.parser == 'true'
        run: cargo install cargo-fuzz
      - name: Build | Run fuzzing
        if: steps.changes.outputs.parser == 'true'
        run: |
          cargo fuzz run -s none ${{ matrix.fuzz-target }} -- -timeout=10 -max_total_time=120 -use_value_profile=1
        working-directory: parser/fuzz
  wasm-build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@nightly
      - name: Setup | Node.js
        uses: re-taro/actions/setup-node@v3.6.0
        with:
          node-version: latest
      - name: Setup | Deno
        uses: denoland/setup-deno@v1.3.0
        with:
          deno-version: v1.x
      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2.7.3
      - name: Setup | wasm-bindgen-cli
        run: cargo install wasm-bindgen-cli
      - name: Build | wasm32-unknown-unknown
        run: |
          rustup target add wasm32-unknown-unknown
          pnpm i --frozen-lockfile
          pnpm run build
        working-directory: js-cli-and-library
        shell: bash
      - name: Build | Test modules
        run: |
          node test.js
          deno run -A test.js
          node test.cjs
        working-directory: js-cli-and-library
        shell: bash
      - name: Build | Check CLI works
        run: |
          node ./dist/cli.cjs info
          deno run -A ./dist/cli.mjs info
        working-directory: js-cli-and-library
        shell: bash
