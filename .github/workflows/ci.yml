name: CI

on:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  CACHE_PATHS: |
    ~/.cargo/bin/
    ~/.cargo/registry/index/
    ~/.cargo/registry/cache/
    ~/.cargo/git/db/
    target/
    checker/fuzz/target
    parser/fuzz/target

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.ref_name != 'main' }}

jobs:
  validity:
    name: Validity
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@1.80.0
      - name: Setup | Cache
        uses: actions/cache@v4.2.0
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Check | Source is valid
        run: cargo check --workspace
      - name: Check | Binary
        run: cargo check --bin decaf
  formating:
    name: Formating
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@1.80.0
        with:
          components: rustfmt
      - name: Check | Rust formatting with rustfmt
        run: cargo fmt --all --check
      - name: Check | TOML formatting with taplo
        uses: docker://docker.io/tamasfe/taplo:0.9.3
        with:
          args: fmt --check **/*/Cargo.toml
  tests:
    name: Tests
    needs: validity
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@1.80.0
      - name: Setup | Cache
        uses: actions/cache@v4.2.0
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup | Filter changes
        uses: dorny/paths-filter@v3.0.2
        id: changes
        with:
          filters: |
            parser:
              - 'parser/**'
            checker:
              - 'checker/**'
      - name: Test | Run parser tests
        if: steps.changes.outputs.parser == 'true' || github.ref_name == 'main'
        run: |
          cargo test
          curl https://esm.sh/v128/react-dom@18.2.0/es2022/react-dom.mjs > react.js
          curl https://esm.sh/v128/typescript@5.7.2/es2022/lib/typescript.js > typescript.js
          cargo run -p decaf-parser --example parse react.js
          cargo run -p decaf-parser --example parse typescript.js
        working-directory: parser
      - name: Test | Run checker specification
        if: (steps.changes.outputs.checker == 'true' && github.event_name != 'pull_request') || github.ref_name == 'main'
        run: cargo test -p decaf-checker-specification
      - name: Run checker specification (w/ staging)
        if: steps.changes.outputs.checker == 'true' && github.event_name == 'pull_request'
        run: cargo test -F staging -p decaf-checker-specification
        env:
          DECAF_DEBUG: 1
      - name: Test | Run checker specification (just to implement)
        continue-on-error: true
        if: steps.changes.outputs.checker == 'true' && github.event_name == 'pull_request'
        run: |
          # Aim of this test is to catch anything that may have been fixed in this next commit or any bad regressions (stack overflows)
          cargo test --no-default-features -F to_implement -p decaf-checker-specification
        env:
          DECAF_DEBUG: 1
      - name: Test | Run checker tests
        if: steps.changes.outputs.checker == 'true' || github.ref_name == 'main'
        run: |
          cargo test -F decaf-parser -p decaf-checker
      - name: Test | Run CLI and base tests
        run: cargo test
  extras:
    name: Extras
    runs-on: ubuntu-latest
    needs: validity
    timeout-minutes: 10
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@1.80.0
      - name: Setup | Cache
        uses: actions/cache@v4.2.0
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup | Filter changes
        uses: dorny/paths-filter@v3.0.2
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
            parser:
              - 'parser/**'
            checker:
              - 'checker/**'
            js-cli-and-library:
              - 'js-cli-and-library/**'
      - name: Setup | Deno
        uses: denoland/setup-deno@v2.0.0
        if: steps.changes.outputs['js-cli-and-library'] == 'true' || github.ref_name == 'main'
        with:
          deno-version: v2.x
      - name: Setup | Node.js
        uses: actions/setup-node@v4.1.0
        if: steps.changes.outputs['js-cli-and-library'] == 'true' || github.ref_name == 'main'
        with:
          node-version: 23
      - name: Setup | pnpm
        if: steps.changes.outputs['js-cli-and-library'] == 'true' || github.ref_name == 'main'
        run: corepack enable
      - name: Check | Parser without extras
        if: steps.changes.outputs.parser == 'true'
        # TODO want `continue-on-error: true` but doesn't report error
        run:
          cargo check -p decaf-parser --no-default-features
      - name: Check | Parser generator
        if: steps.changes.outputs.parser == 'true'
        # TODO want `continue-on-error: true` but doesn't report error
        run:
          cargo test -p decaf-ast-generator
      - name: Check | Checker without default features
        if: steps.changes.outputs.checker == 'true'
        # TODO want `continue-on-error: true` but doesn't report error
        run:
          cargo check -p decaf-checker --no-default-features
      - name: Test | Build and test WASM
        if: steps.changes.outputs['js-cli-and-library'] == 'true' || github.ref_name == 'main'
        timeout-minutes: 5
        run: |
          # TODO `cargo check --target wasm32-unknown-unknown --lib` might be good enough

          rustup target add wasm32-unknown-unknown
          pnpm i --frozen-lockfile
          pnpm build

          node ./dist/cli.cjs info
          deno run -A ./dist/cli.mjs info

          pnpm run-tests

          pnpm dlx typescript tsc --strict --pretty ./build/decaf_lib.d.ts
          echo "debug checked with TSC"
          cargo run -p decaf-parser --example parse ./build/decaf_lib.d.ts --type-definition-module

          # TODO temp as the types generated can be a bit unpredicatible
          if ${{ contains(fromJSON('["main"]'), github.ref_name ) }}; then
            npm run build-release
            pnpm dlx typescript tsc --strict --pretty ./build/decaf_lib.d.ts
          fi
        working-directory: js-cli-and-library
        shell: bash
  fuzzing_parser:
    name: Fuzzing [Parser]
    if: ${{ github.ref == 'main' || !github.event.pull_request.draft }}
    needs: validity
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    strategy:
      matrix:
        fuzz-target: [module_roundtrip_naive, module_roundtrip_structured]
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@1.80.0
      - name: Setup | Cache
        uses: actions/cache@v4.2.0
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup | Filter changes
        uses: dorny/paths-filter@v3.0.2
        id: changes
        with:
          filters: |
            parser:
              - 'parser/**'
      - name: Setup | Install latest nightly and set it as default
        if: steps.changes.outputs.parser == 'true'
        run: |
          rustup install nightly
          rustup default nightly
      # https://github.com/rust-fuzz/cargo-fuzz/issues/355
      - name: Setup | Install cargo-fuzz
        if: steps.changes.outputs.parser == 'true'
        run: cargo install --git https://github.com/rust-fuzz/cargo-fuzz.git
      - name: Test | Run fuzzing
        env:
          SHORT_CIRCUIT: true
        if: steps.changes.outputs.parser == 'true'
        run: |
          if ${{ env.SHORT_CIRCUIT }}; then
            CARGO_TARGET_DIR=../../target cargo fuzz run -s none ${{ matrix.fuzz-target }} -- -timeout=10 -use_value_profile=1 -max_total_time=120
          else
            CARGO_TARGET_DIR=../../target cargo fuzz run -s none ${{ matrix.fuzz-target }} -- -timeout=10 -use_value_profile=1 -max_total_time=300 -fork=1 -ignore_crashes=1

            if test -d fuzz/artifacts; then
              find fuzz/artifacts -type f -print -exec xxd {} \; -exec cargo fuzz fmt -s none module_roundtrip_structured {} \;; false;
            fi
          fi
        working-directory: parser/fuzz
  fuzzing_checker:
    name: Fuzzing [Checker]
    if: ${{ github.ref == 'main' || !github.event.pull_request.draft }}
    needs: validity
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    strategy:
      matrix:
        fuzz-target: [check_project_naive]
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@1.80.0
      - name: Setup | Cache
        uses: actions/cache@v4.2.0
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup | Filter changes
        uses: dorny/paths-filter@v3.0.2
        id: changes
        with:
          filters: |
            checker:
              - 'checker/**'
      - name: Setup | Install latest nightly and set it as default
        if: steps.changes.outputs.checker == 'true'
        run: |
          rustup install nightly
          rustup default nightly
      - name: Setup | Install cargo-fuzz
        if: steps.changes.outputs.checker == 'true'
        run: cargo install --git https://github.com/rust-fuzz/cargo-fuzz.git
      - name: Test | Run fuzzing
        env:
          SHORT_CIRCUIT: true
        if: steps.changes.outputs.checker == 'true'
        run: |
          if ${{ env.SHORT_CIRCUIT }}; then
            cargo fuzz run -s none ${{ matrix.fuzz-target }} -- -timeout=10 -use_value_profile=1 -max_total_time=120
          else
            cargo fuzz run -s none ${{ matrix.fuzz-target }} -- -timeout=10 -use_value_profile=1 -max_total_time=300 -fork=1 -ignore_crashes=1

            # if test -d fuzz/artifacts; then
            #   find fuzz/artifacts -type f -print -exec xxd {} \; -exec cargo fuzz fmt -s none module_roundtrip_structured {} \;; false;
            # fi
          fi

          ls .
          ls target
        working-directory: checker/fuzz
  clippy:
    name: Clippy
    needs: validity
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4.1.7
      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@1.80.0
        with:
          components: clippy
      - name: Setup | Cache
        uses: actions/cache@v4.2.0
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Lint | Lint code with clippy
        run: cargo clippy
